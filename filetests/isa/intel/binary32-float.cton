; Binary emission of 32-bit floating point code.
test binemit
isa intel has_sse2

; The binary encodings can be verified with the command:
;
;   sed -ne 's/^ *; asm: *//p' filetests/isa/intel/binary32-float.cton | llvm-mc -show-encoding -triple=i386
;

function %F32() {
    ss0 = incoming_arg 8, offset 0
    ss1 = incoming_arg 1024, offset -1024
    ss2 = incoming_arg 1024, offset -2048
    ss3 = incoming_arg 8, offset -2056

ebb0:
    [-,%rcx]            v0 = iconst.i32 1
    [-,%rsi]            v1 = iconst.i32 2

    ; asm: cvtsi2ss %ecx, %xmm5
    [-,%xmm5]           v10 = fcvt_from_sint.f32 v0             ; bin: f3 0f 2a e9
    ; asm: cvtsi2ss %esi, %xmm2
    [-,%xmm2]           v11 = fcvt_from_sint.f32 v1             ; bin: f3 0f 2a d6

    ; asm: cvtss2sd %xmm2, %xmm5
    [-,%xmm5]           v12 = fpromote.f64 v11                  ; bin: f3 0f 5a ea
    ; asm: cvtss2sd %xmm5, %xmm2
    [-,%xmm2]           v13 = fpromote.f64 v10                  ; bin: f3 0f 5a d5

    ; asm: movd %ecx, %xmm5
    [-,%xmm5]           v14 = bitcast.f32 v0                    ; bin: 66 0f 6e e9
    ; asm: movd %esi, %xmm2
    [-,%xmm2]           v15 = bitcast.f32 v1                    ; bin: 66 0f 6e d6

    ; asm: movd %xmm5, %ecx
    [-,%rcx]            v16 = bitcast.i32 v10                   ; bin: 66 0f 7e e9
    ; asm: movd %xmm2, %esi
    [-,%rsi]            v17 = bitcast.i32 v11                   ; bin: 66 0f 7e d6

    ; Binary arithmetic.

    ; asm: addss %xmm2, %xmm5
    [-,%xmm5]           v20 = fadd v10, v11                     ; bin: f3 0f 58 ea
    ; asm: addss %xmm5, %xmm2
    [-,%xmm2]           v21 = fadd v11, v10                     ; bin: f3 0f 58 d5 

    ; asm: subss %xmm2, %xmm5
    [-,%xmm5]           v22 = fsub v10, v11                     ; bin: f3 0f 5c ea
    ; asm: subss %xmm5, %xmm2
    [-,%xmm2]           v23 = fsub v11, v10                     ; bin: f3 0f 5c d5

    ; asm: mulss %xmm2, %xmm5
    [-,%xmm5]           v24 = fmul v10, v11                     ; bin: f3 0f 59 ea
    ; asm: mulss %xmm5, %xmm2
    [-,%xmm2]           v25 = fmul v11, v10                     ; bin: f3 0f 59 d5

    ; asm: divss %xmm2, %xmm5
    [-,%xmm5]           v26 = fdiv v10, v11                     ; bin: f3 0f 5e ea
    ; asm: divss %xmm5, %xmm2
    [-,%xmm2]           v27 = fdiv v11, v10                     ; bin: f3 0f 5e d5

    ; Bitwise ops.
    ; We use the *ps SSE instructions for everything because they are smaller.

    ; asm: andps %xmm2, %xmm5
    [-,%xmm5]           v30 = band v10, v11                     ; bin: 0f 54 ea
    ; asm: andps %xmm5, %xmm2
    [-,%xmm2]           v31 = band v11, v10                     ; bin: 0f 54 d5

    ; asm: andnps %xmm2, %xmm5
    [-,%xmm5]           v32 = band_not v10, v11                 ; bin: 0f 55 ea
    ; asm: andnps %xmm5, %xmm2
    [-,%xmm2]           v33 = band_not v11, v10                 ; bin: 0f 55 d5

    ; asm: orps %xmm2, %xmm5
    [-,%xmm5]           v34 = bor v10, v11                      ; bin: 0f 56 ea
    ; asm: orps %xmm5, %xmm2
    [-,%xmm2]           v35 = bor v11, v10                      ; bin: 0f 56 d5

    ; asm: xorps %xmm2, %xmm5
    [-,%xmm5]           v36 = bxor v10, v11                     ; bin: 0f 57 ea
    ; asm: xorps %xmm5, %xmm2
    [-,%xmm2]           v37 = bxor v11, v10                     ; bin: 0f 57 d5

    ; Unary arithmetic.

    ; asm: sqrtss %xmm5, %xmm2
    [-,%xmm2]           v50 = sqrt v10                          ; bin: f3 0f 51 d5
    ; asm: sqrtss %xmm2, %xmm5
    [-,%xmm5]           v51 = sqrt v11                          ; bin: f3 0f 51 ea


    ; Load/Store

    ; asm: movd (%ecx), %xmm5
    [-,%xmm5]           v100 = load.f32 v0                      ; bin: 66 0f 6e 29
    ; asm: movd (%esi), %xmm2
    [-,%xmm2]           v101 = load.f32 v1                      ; bin: 66 0f 6e 16
    ; asm: movd 50(%ecx), %xmm5
    [-,%xmm5]           v110 = load.f32 v0+50                   ; bin: 66 0f 6e 69 32
    ; asm: movd -50(%esi), %xmm2
    [-,%xmm2]           v111 = load.f32 v1-50                   ; bin: 66 0f 6e 56 ce
    ; asm: movd 10000(%ecx), %xmm5
    [-,%xmm5]           v120 = load.f32 v0+10000                ; bin: 66 0f 6e a9 00002710
    ; asm: movd -10000(%esi), %xmm2
    [-,%xmm2]           v121 = load.f32 v1-10000                ; bin: 66 0f 6e 96 ffffd8f0

    ; asm: movd %xmm5, (%ecx)
    [-]                 store.f32 v100, v0                      ; bin: 66 0f 7e 29
    ; asm: movd %xmm2, (%esi)
    [-]                 store.f32 v101, v1                      ; bin: 66 0f 7e 16
    ; asm: movd %xmm5, 50(%ecx)
    [-]                 store.f32 v100, v0+50                   ; bin: 66 0f 7e 69 32
    ; asm: movd %xmm2, -50(%esi)
    [-]                 store.f32 v101, v1-50                   ; bin: 66 0f 7e 56 ce
    ; asm: movd %xmm5, 10000(%ecx)
    [-]                 store.f32 v100, v0+10000                ; bin: 66 0f 7e a9 00002710
    ; asm: movd %xmm2, -10000(%esi)
    [-]                 store.f32 v101, v1-10000                ; bin: 66 0f 7e 96 ffffd8f0

    ; Spill / Fill.

    ; asm: movd %xmm5, 1032(%esp)
    [-,ss1]             v200 = spill v100                       ; bin: 66 0f 7e ac 24 00000408
    ; asm: movd %xmm2, 1032(%esp)
    [-,ss1]             v201 = spill v101                       ; bin: 66 0f 7e 94 24 00000408

    ; asm: movd 1032(%esp), %xmm5
    [-,%xmm5]           v210 = fill v200                        ; bin: 66 0f 6e ac 24 00000408
    ; asm: movd 1032(%esp), %xmm2
    [-,%xmm2]           v211 = fill v201                        ; bin: 66 0f 6e 94 24 00000408

    return
}

function %F64() {
    ss0 = incoming_arg 8, offset 0
    ss1 = incoming_arg 1024, offset -1024
    ss2 = incoming_arg 1024, offset -2048
    ss3 = incoming_arg 8, offset -2056

ebb0:
    [-,%rcx]            v0 = iconst.i32 1
    [-,%rsi]            v1 = iconst.i32 2

    ; asm: cvtsi2sd %ecx, %xmm5
    [-,%xmm5]           v10 = fcvt_from_sint.f64 v0             ; bin: f2 0f 2a e9
    ; asm: cvtsi2sd %esi, %xmm2
    [-,%xmm2]           v11 = fcvt_from_sint.f64 v1             ; bin: f2 0f 2a d6

    ; asm: cvtsd2ss %xmm2, %xmm5
    [-,%xmm5]           v12 = fdemote.f32 v11                   ; bin: f2 0f 5a ea
    ; asm: cvtsd2ss %xmm5, %xmm2
    [-,%xmm2]           v13 = fdemote.f32 v10                   ; bin: f2 0f 5a d5

    ; No i64 <-> f64 bitcasts in 32-bit mode.

    ; Binary arithmetic.

    ; asm: addsd %xmm2, %xmm5
    [-,%xmm5]           v20 = fadd v10, v11                     ; bin: f2 0f 58 ea
    ; asm: addsd %xmm5, %xmm2
    [-,%xmm2]           v21 = fadd v11, v10                     ; bin: f2 0f 58 d5 

    ; asm: subsd %xmm2, %xmm5
    [-,%xmm5]           v22 = fsub v10, v11                     ; bin: f2 0f 5c ea
    ; asm: subsd %xmm5, %xmm2
    [-,%xmm2]           v23 = fsub v11, v10                     ; bin: f2 0f 5c d5

    ; asm: mulsd %xmm2, %xmm5
    [-,%xmm5]           v24 = fmul v10, v11                     ; bin: f2 0f 59 ea
    ; asm: mulsd %xmm5, %xmm2
    [-,%xmm2]           v25 = fmul v11, v10                     ; bin: f2 0f 59 d5

    ; asm: divsd %xmm2, %xmm5
    [-,%xmm5]           v26 = fdiv v10, v11                     ; bin: f2 0f 5e ea
    ; asm: divsd %xmm5, %xmm2
    [-,%xmm2]           v27 = fdiv v11, v10                     ; bin: f2 0f 5e d5

    ; Bitwise ops.
    ; We use the *ps SSE instructions for everything because they are smaller.

    ; asm: andps %xmm2, %xmm5
    [-,%xmm5]           v30 = band v10, v11                     ; bin: 0f 54 ea
    ; asm: andps %xmm5, %xmm2
    [-,%xmm2]           v31 = band v11, v10                     ; bin: 0f 54 d5

    ; asm: andnps %xmm2, %xmm5
    [-,%xmm5]           v32 = band_not v10, v11                 ; bin: 0f 55 ea
    ; asm: andnps %xmm5, %xmm2
    [-,%xmm2]           v33 = band_not v11, v10                 ; bin: 0f 55 d5

    ; asm: orps %xmm2, %xmm5
    [-,%xmm5]           v34 = bor v10, v11                      ; bin: 0f 56 ea
    ; asm: orps %xmm5, %xmm2
    [-,%xmm2]           v35 = bor v11, v10                      ; bin: 0f 56 d5

    ; asm: xorps %xmm2, %xmm5
    [-,%xmm5]           v36 = bxor v10, v11                     ; bin: 0f 57 ea
    ; asm: xorps %xmm5, %xmm2
    [-,%xmm2]           v37 = bxor v11, v10                     ; bin: 0f 57 d5

    ; Unary arithmetic.

    ; asm: sqrtsd %xmm5, %xmm2
    [-,%xmm2]           v50 = sqrt v10                          ; bin: f2 0f 51 d5
    ; asm: sqrtsd %xmm2, %xmm5
    [-,%xmm5]           v51 = sqrt v11                          ; bin: f2 0f 51 ea


    ; Load/Store

    ; asm: movq (%ecx), %xmm5
    [-,%xmm5]           v100 = load.f64 v0                      ; bin: f3 0f 7e 29
    ; asm: movq (%esi), %xmm2
    [-,%xmm2]           v101 = load.f64 v1                      ; bin: f3 0f 7e 16
    ; asm: movq 50(%ecx), %xmm5
    [-,%xmm5]           v110 = load.f64 v0+50                   ; bin: f3 0f 7e 69 32
    ; asm: movq -50(%esi), %xmm2
    [-,%xmm2]           v111 = load.f64 v1-50                   ; bin: f3 0f 7e 56 ce
    ; asm: movq 10000(%ecx), %xmm5
    [-,%xmm5]           v120 = load.f64 v0+10000                ; bin: f3 0f 7e a9 00002710
    ; asm: movq -10000(%esi), %xmm2
    [-,%xmm2]           v121 = load.f64 v1-10000                ; bin: f3 0f 7e 96 ffffd8f0

    ; asm: movq %xmm5, (%ecx)
    [-]                 store.f64 v100, v0                      ; bin: 66 0f d6 29
    ; asm: movq %xmm2, (%esi)
    [-]                 store.f64 v101, v1                      ; bin: 66 0f d6 16
    ; asm: movq %xmm5, 50(%ecx)
    [-]                 store.f64 v100, v0+50                   ; bin: 66 0f d6 69 32
    ; asm: movq %xmm2, -50(%esi)
    [-]                 store.f64 v101, v1-50                   ; bin: 66 0f d6 56 ce
    ; asm: movq %xmm5, 10000(%ecx)
    [-]                 store.f64 v100, v0+10000                ; bin: 66 0f d6 a9 00002710
    ; asm: movq %xmm2, -10000(%esi)
    [-]                 store.f64 v101, v1-10000                ; bin: 66 0f d6 96 ffffd8f0

    ; Spill / Fill.

    ; asm: movq %xmm5, 1032(%esp)
    [-,ss1]             v200 = spill v100                       ; bin: 66 0f d6 ac 24 00000408
    ; asm: movq %xmm2, 1032(%esp)
    [-,ss1]             v201 = spill v101                       ; bin: 66 0f d6 94 24 00000408

    ; asm: movq 1032(%esp), %xmm5
    [-,%xmm5]           v210 = fill v200                        ; bin: f3 0f 7e ac 24 00000408
    ; asm: movq 1032(%esp), %xmm2
    [-,%xmm2]           v211 = fill v201                        ; bin: f3 0f 7e 94 24 00000408

    return
}
