; Test legalizer's handling of ABI boundaries.
test legalizer
isa riscv

; regex: V=vx?\d+

function int_split_args(i64) -> i64 {
ebb0(v0: i64):
    ; check: $ebb0($(v0l=$V): i32, $(v0h=$V): i32):
    ; check: iconcat_lohi $v0l, $v0h
    v1 = iadd_imm v0, 1
    ; check: $(v1l=$V), $(v1h=$V) = isplit_lohi $v1
    ; check: return $v1l, $v1h
    return v1
}

function int_ext(i8, i8 sext, i8 uext) -> i8 uext {
ebb0(v1: i8, v2: i8, v3: i8):
    ; check: $ebb0($v1: i8, $(v2x=$V): i32, $(v3x=$V): i32):
    ; check: ireduce.i8 $v2x
    ; check: ireduce.i8 $v3x
    ; check: $(v1x=$V) = uextend.i32 $v1
    ; check: return $v1x
    return v1
}

function vector_split_args(i64x4) -> i64x4 {
ebb0(v0: i64x4):
    ; check: $ebb0($(v0al=$V): i32, $(v0ah=$V): i32, $(v0bl=$V): i32, $(v0bh=$V): i32, $(v0cl=$V): i32, $(v0ch=$V): i32, $(v0dl=$V): i32, $(v0dh=$V): i32):
    ; check: $(v0a=$V) = iconcat_lohi $v0al, $v0ah
    ; check: $(v0b=$V) = iconcat_lohi $v0bl, $v0bh
    ; check: $(v0ab=$V) = vconcat $v0a, $v0b
    ; check: $(v0c=$V) = iconcat_lohi $v0cl, $v0ch
    ; check: $(v0d=$V) = iconcat_lohi $v0dl, $v0dh
    ; check: $(v0cd=$V) = vconcat $v0c, $v0d
    ; check: $(v0abcd=$V) = vconcat $v0ab, $v0cd
    v1 = iadd v0, v0
    ; check: $(v1ab=$V), $(v1cd=$V) = vsplit
    ; check: $(v1a=$V), $(v1b=$V) = vsplit $v1ab
    ; check: $(v1al=$V), $(v1ah=$V) = isplit_lohi $v1a
    ; check: $(v1bl=$V), $(v1bh=$V) = isplit_lohi $v1b
    ; check: $(v1c=$V), $(v1d=$V) = vsplit $v1cd
    ; check: $(v1cl=$V), $(v1ch=$V) = isplit_lohi $v1c
    ; check: $(v1dl=$V), $(v1dh=$V) = isplit_lohi $v1d
    ; check: return $v1al, $v1ah, $v1bl, $v1bh, $v1cl, $v1ch, $v1dl, $v1dh
    return v1
}
