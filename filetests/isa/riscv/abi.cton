; Test the legalization of function signatures.
test legalizer
isa riscv

; regex: V=v\d+

function %f() {
    sig0 = (i32) -> i32 native
    ; check: sig0 = (i32 [%x10]) -> i32 [%x10] native

    sig1 = (i64) -> b1 native
    ; check: sig1 = (i32 [%x10], i32 [%x11]) -> b1 [%x10] native

    ; The i64 argument must go in an even-odd register pair.
    sig2 = (f32, i64) -> f64 native
    ; check: sig2 = (f32 [%f10], i32 [%x12], i32 [%x13]) -> f64 [%f10] native

    ; Spilling into the stack args.
    sig3 = (f64, f64, f64, f64, f64, f64, f64, i64) -> f64 native
    ; check: sig3 = (f64 [%f10], f64 [%f11], f64 [%f12], f64 [%f13], f64 [%f14], f64 [%f15], f64 [%f16], i32 [0], i32 [4]) -> f64 [%f10] native

    ; Splitting vectors.
    sig4 = (i32x4) native
    ; check: sig4 = (i32 [%x10], i32 [%x11], i32 [%x12], i32 [%x13]) native

    ; Splitting vectors, then splitting ints.
    sig5 = (i64x4) native
    ; check: sig5 = (i32 [%x10], i32 [%x11], i32 [%x12], i32 [%x13], i32 [%x14], i32 [%x15], i32 [%x16], i32 [%x17]) native

ebb0:
    return
}
